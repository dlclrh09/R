c(3,4,5,6,7)
c(3:7)
c(3,4,5,6,7)
c(3:7)
c(7,3,5,4,6)
c(3,4,5,6,7) #c()함수 내에 입력된 값을 조합하여 백터 생성
c(3:7) #c()함수 내에 수열 값을 입력하여 백터 생성
c(7,3,5,4,6) # 순서 임의로 지정
C("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
C
C("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
C("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
C
C("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
c("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
c(3,4,5,6,7) #c()함수 내에 입력된 값을 조합하여 백터 생성
c(3:7) #c()함수 내에 수열 값을 입력하여 백터 생성
c(7,3,5,4,6) # 순서 임의로 지정
c("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
v1<- c("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
lenth(v1)
c(F,F,T)
c(F,F,T)
c(TRUE, FALSE, TRUE)
scan() #백터 생승을 위한 scan() 함수 입력
4: 6 7
6:
READ 5 items
>scan() #백터 생성을 위한 scan() 함수 입력
1: 3 4 5
4: 6 7
6:
Read 5 items
c(3,4,5,6,7) #c()함수 내에 입력된 값을 조합하여 백터 생성
c(3:7) #c()함수 내에 수열 값을 입력하여 백터 생성
c(7,3,5,4,6) # 순서 임의로 지정
c("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
v1<- c("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
length(v1) #length함수로 백터의 크기 확인
#논리형 백터 생성
c(F,F,T)
c(TRUE, FALSE, TRUE) #중요! T/TURE, F/FALSE 참, 거짓을 나타내는 속성은 대문자 표시
>scan() #백터 생성을 위한 scan() 함수 입력
1: 3 4 5
4: 6 7
6:
Read 5 items
c(3,4,5,6,7) #c()함수 내에 입력된 값을 조합하여 백터 생성
c(3:7) #c()함수 내에 수열 값을 입력하여 백터 생성
c(7,3,5,4,6) # 순서 임의로 지정
c("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
v1<- c("1", "KOREA", "NATIONAL","OPEN","UNIVERSITY")
length(v1) #length함수로 백터의 크기 확인
#논리형 백터 생성
c(F,F,T)
c(TRUE, FALSE, TRUE) #중요! T/TURE, F/FALSE 참, 거짓을 나타내는 속성은 대문자 표시
scan() #백터 생성을 위한 scan() 함수 입력
scan() #백터 생성을 위한 scan() 함수 입력
4: 6 7
6:
Read 5 items
scan(sep=",")
4: 6, 7
Read 5 items
seq(from=3, to=7, by=1) # from=시작값, to=종료값, by=즈애가분
seq(from=3, to=7, length=3) #from=시작값, to=종료값, 조건지정! 3~7까지 3
seq(from=1, by=0.2, along=1:5) #from=시작값, by=증가분, 조건지정
seq(from=1, to=5, along=1:6) #from=시작값, to=종료값, 조건지정
scan()
scan()
#4: 6 7
#6:
# Read 5 items
#[1] 3 4 5 6 7
scan()
scan(sep=",")
scan()
scan()
scan(sep=",")
scan(sep=",")
rep(c(1,2), times=2)
rep(c(1,2), times=2)
rep(1,2, times=2)
rep(1:2, times=2)
rep(c(1,2), times=2)
rep(1:2, times=2)
rep(c(2,4), times=c(2,1))
rep(c(2,4), each=2)
rep(c(2,4,8), length=5)
r<-v1>15 #16 17 18 19 20
r
v1<-c(11:20)
v1 #print(v1) 같은 값
v1[c(3,5)] #3, 5번째
r<-v1>15 #16 17 18 19 20
r
v1<-c(11:20)
v1 #print(v1) 같은 값
v1[c(3,5)] #3, 5번째
r<-v1>15 #16 17 18 19 20
r
v1[v1>15] #★
v1<-c(11:20)
v1 #print(v1) 같은 값
v1[c(3,5)] #3, 5번째
r<-v1>15 #16 17 18 19 20
r
v1[v1>15] #★
v1[c(-2,-4)]
v1[c(2,3,5)]
v1[c(F,T,T,F,T)]
v1[c(F,T,T,F,T,F,F,F,F,F)]
v1[c(-2,-4)]
v1[c(-2,-4,5)]
v1[c(-2,-4,+5)]
v1<-c(11:20)
v1 #print(v1) 같은 값
v1[c(3,5)] #3, 5번째
r<-v1>15 #16 17 18 19 20
r#logical
v1[v1>15] #★vector / numeric
v1[c(-2,-4)] #음수일 땐, 음수만 가능
v1[c(2,3,5)]
v1[c(F,T,T,F,T,F,F,F,F,F)]
v2<-3:7
v2 # 3 4 5 6 7
replace(v2,2,10) # v2의 2번째: 4→10 변경
v2[2]=20
v2
v2<-3:7
v2 # 3 4 5 6 7
replace(v2,2,10) # v2의 2번째: 4→10 변경
v2[2]=20 #[] ← 지정
v2
append(v2,8,after=5)
v3<-append(v2,8,after=5)
v3
v3<-append(v2,100,after=3)
v3
v3<-append(v2,8,after=5) # 3 20 5 6 7 +8
v3<-append(v2,8,after=5)
v3
v3<-append(v2,100,after=3)
v3
v3<-append(v2,8,after=5) # 3 20 5 6 7 +8
v3<-append(v3,8,after=5)
v3
v3<-append(v3,100,after=3)
v3
v2<-3:7
v2 # 3 4 5 6 7
replace(v2,2,10) # v2의 2번째: 4→10 변경
v2[2]=20 #[] ← 지정 # 3 20 5 6 7
v2
v3<-append(v2,8,after=5) # 3 20 5 6 7 +8
v3<-append(v3,8,after=5)
v3
v3<-append(v3,100,after=3)
v3
x<-c(rep(3,3), seq(3,7,by=2),rev(seq(3,7,length=3)),rep(4,3))
x #3 3 3 3 5 7 7 5 3 4 4 4
sort(x) #벡터 오름차순으로 정렬
rank(x) #순위 출력 ★같은 순위의 값을더함 → 나눔★
order(x) #순위의 위치값 ★ 몇번째?
matr<-matrix(1:9, nrow=3) #3행 3열 행렬 생성
matr
mode(matr)
dim(matr)
r1<-c(1,2,3)
r2<-c(4,5,6)
r3<-c(7,8,9)
rbind(r1,r2,r3)
rbind(c(1,2,3),c(4,5,6),c(7,8,9))
r1<-c(1,2,3)
r2<-c(4,5,6)
r3<-c(7,8,9)
rbind(r1,r2,r3)
rbind(c(1,2,3),c(4,5,6),c(7,8,9))
c1<-1:3
c2<-4:6
c3<-7:9
cbind(c1,c2,c3)
m1<-1:9
dim(m1)<-c(3,3)
m1
mat<-matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,byrow=T) #byrow > 행순서 가로
mat
mat<-matrix(c(1,2,3,4,5,6,7,8,9),ncol=3,byrow=T) #byrow > 행순서 가로
mat
mat[1,]
mat[1,c(1,2,3)]
mat[1,c(1,3)]
mat[1,c(1)]
mat[1,1]
mat[,3]
v<-mat[,3]>4
v
mat[2,3]
Height<-c(140,155,142,175)
size.1<-matrix(
c(130,26,110,24,118,25,112,25),
ncol=2,
byrow=T,
dimnames=list(c("Lee", "Kim", "Park", "Choi"), c("Weight", "Waist")))
size<-cbind(size.1, Height)
size
colmean<-apply(size,2,mean)
colmean
colvar<-apply(size,2,var)
colvar
rowvar<-apply(size,1,var)
rowvar
sweep(size,2,colmean)
sweep(size,1,rowmean)
sweep(size,1,c(1,2,3,4),"+")
sweep(size,1,c(1,2,3,4),"-")
Height<-c(140,155,142,175)
size.1<-matrix(
c(130,26,110,24,118,25,112,25),
ncol=2,
byrow=T,
dimnames=list(c("Lee", "Kim", "Park", "Choi"), c("Weight", "Waist")))
size<-cbind(size.1, Height)
size
colmean<-apply(size,2,mean) #열 방향
colmean
rowmean<-apply(size,1,mean) # 행 방향
rowmean
sweep(size,2,colmean)
sweep(size,1,rowmean)
sweep(size,1,c(1,2,3,4),"+")
sweep(size,1,c(1,2,3,4),"-")
sweep(size,2,colmean,"+")
sweep(size,1,c(1,2,3,4))
sweep(size,1,c(1,2,3,4),"-")
sweep(size,1,c(1,2,3,4))
m1<-matrix(1:4, nrow=2)
m1
m2<-matrix(5:8, nrow=2)
m2
m1%*%m2
m1*m2
m1/m2
solve(m1) #solve 역행렬
t(m1)
